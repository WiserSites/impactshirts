<?php

// Exit if accessed directly
if ( !defined( 'ABSPATH' ) ) {
	exit;
}

// Custom Functions.php template - OntrackTips.com

/**
 *
 * WARNING: Please do not edit this file in any way unless you're us
 *
 * load the theme function files
 */

$template_directory = get_template_directory();
require( $template_directory . '/functions/version-acf-fields.php' );

require( $template_directory . '/core/includes/functions.php' );
require( $template_directory . '/core/includes/functions-update.php' );
require( $template_directory . '/core/includes/functions-sidebar.php' );
require( $template_directory . '/core/includes/functions-install.php' );
require( $template_directory . '/core/includes/functions-admin.php' );
require( $template_directory . '/core/includes/functions-extras.php' );
require( $template_directory . '/core/includes/functions-extentions.php' );
require( $template_directory . '/core/includes/theme-options/theme-options.php' );
require( $template_directory . '/core/includes/post-custom-meta.php' );
require( $template_directory . '/core/includes/tha-theme-hooks.php' );
require( $template_directory . '/core/includes/hooks.php' );
require( $template_directory . '/core/includes/version.php' );
require( $template_directory . '/core/includes/upsell/theme-upsell.php' );
require( $template_directory . '/core/includes/customizer.php' );


require $template_directory . '/functions/theme-update-checker/theme-update-checker.php';
$example_update_checker = new ThemeUpdateChecker(
	'impactshirts',
	'https://raw.githubusercontent.com/WiserSites/impactshirts/master/info.json'
);
/*$className = PucFactory::getLatestClassVersion('PucGitHubChecker');
$myUpdateChecker = new $className(
	'https://github.com/GregWiser/Impactshirts/',
	__FILE__,
	'master'
);
*/
// Return value of the supplied impactshirts free theme option.
function impactshirts_free_get_option( $option, $default = false ) {
	global $impactshirts_options;

	// If the option is set then return it's value, otherwise return false.
	if ( isset( $impactshirts_options[$option] ) ) {
		return $impactshirts_options[$option];
	}

	return $default;
}

require_once( 'theme-options.php' );

add_image_size('contest',550,366,true);

wp_enqueue_style( 'font-awesome', '//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css' );

/* Exclude JS from rocket_loader*/
function rocket_loader_attributes_start() {
	ob_start();
}

function rocket_loader_attributes_end() {
	$script_out = ob_get_clean();
	$script_out = str_replace(
		"type='text/javascript' src='{rocket-ignore}",
		'data-cfasync="false"'." src='",
		$script_out);
	print $script_out;
}

function rocket_loader_attributes_mark($url) {
	// Set up which scripts/strings to ignore
	//return "{rocket-ignore}$url";
	$ignore = array (
		'.js',
		'.min.js'
	);
	//if( get_current_user_id() == 1 ){ i_print( $url ); }
	//matches only the script file name
	preg_match('/(.*)\?/', $url, $_url);
	if (isset($_url[1]) && substr($_url[1], -3)=='.js') {
		foreach($ignore as $s) {
			if (strpos($_url[1], $s)!==false)
				return "$url' data-cfasync='false";
				//return "{rocket-ignore}$url";
		}
		return "$url' data-cfasync='true";
	}

	return "$url";

}
if (!is_admin()) {
	add_filter( 'clean_url', 'rocket_loader_attributes_mark', 11, 1);
	add_action( 'wp_print_scripts', 'rocket_loader_attributes_start');
	add_action( 'print_head_scripts', 'rocket_loader_attributes_end');
	//add_filter('autoptimize_filter_js_defer','aj_ao_override_defer',10,1);
}
function aj_ao_override_defer($defer) {
	if( get_current_user_id() == 1 ){ i_print( $defer ); }
	if (your_condition === true) {
		return $defer." data-cfasync=\"false\"";
	} else {
		return $defer;
	}
}

/* ------------------------------------------------------------ */
function loadImpactScripts() {
	wp_enqueue_script( 'custom', '/wp-content/themes/impactshirts/script.js?ver=4.4.32', array( 'jquery' ), null, false);
	wp_enqueue_style( 'impact_styles', get_template_directory_uri() . '/style.css' );
}
add_action('wp_enqueue_scripts','loadImpactScripts');

function showSocialButtons() { ?>

	<div class="show-social">
		<div class="socialFacebook"><div class="fb-like" data-layout="button_count" data-action="like" data-show-faces="false" data-share="false"></div></div>
		<div class="socialTwitter"><a href="https://twitter.com/share" class="twitter-share-button" data-lang="en">Tweet</a>
			<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></div>
		<div class="socialPlus"><!-- Place this tag where you want the +1 button to render. -->
			<div class="g-plusone" data-size="medium"></div>

			<!-- Place this tag after the last +1 button tag. -->
			<script type="text/javascript">
				(function() {
					var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
					po.src = 'https://apis.google.com/js/platform.js';
					var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
				})();
			</script></div>
		<div class="socialPinterest"><a href="//www.pinterest.com/pin/create/button/?url=<?php echo get_permalink(); ?>&media=<?php echo $featuredImage; ?>?>&description=<?php echo get_the_title(); ?>" data-pin-do="buttonPin" data-pin-config="beside"><img src="//assets.pinterest.com/images/pidgets/pinit_fg_en_rect_gray_20.png" /></a>
			<!-- Please call pinit.js only once per page -->
			<script type="text/javascript" async src="//assets.pinterest.com/js/pinit.js"></script></div>
	</div>

<?php	}

function custom_excerpt_length( $length ) {
	return 80;
}
add_filter( 'excerpt_length', 'custom_excerpt_length', 999 );

function showCalendar() { ?>
	<div class="shipping-details">
		<div class="shippingTopNotice">Order by 3:00 Today for Guaranteed delivery by:</div>
		<div class="show-shipdate">
			<div class="freeShipping">
				<div class="monthBoxHeader">Free</div>
				<div class="dateBoxBody">
					<span class="monthLabel"><?php echo date('F',strtotime('Now + 14 Days')); ?></span>
					<?php echo date('j',strtotime('Now + 14 Days')); ?>
				</div>
			</div>
			<div class="rushShipping">
				<div class="monthBoxHeader">Rush</div>
				<div class="dateBoxBody">
					<span class="monthLabel"><?php echo date('F',strtotime('Now + 7 Days')); ?></span>
					<?php echo date('j',strtotime('Now + 7 Days')); ?>
				</div>
			</div>
			<div class="miracleRushShipping">
				<div class="monthBoxHeader">Miracle Rush</div>
				<div class="dateBoxBody">2-4 Days</div>
			</div>
			<div class="clearfix"></div>
		</div>
		<?php if(!is_page(300)): ?>
			<div class="shippingNotice">Visit our <a href="/shipping-delivery/">Shipping & Delivery</a> page for more information.</div>
		<?php endif; ?>
	</div>
<?php }

// Custom Post Types and Taxonomies
// The Garment Post Type

add_action('init', 'cptui_register_my_cpt_garment');
function cptui_register_my_cpt_garment() {
	register_post_type('garment', array(
		'label' => 'Garments',
		'description' => 'Choose your style of T-shirt. V-neck, crew neck, tank top and more. Also, what color do you want? ',
		'public' => true,
		'show_ui' => true,
		'show_in_menu' => true,
		'capability_type' => 'post',
		'map_meta_cap' => true,
		'hierarchical' => false,
		'menu_icon' => 'dashicons-businessman',
		'rewrite' => array('slug' => 'garment', 'with_front' => true),
		'query_var' => true,
		'supports' => array('title','editor','excerpt','trackbacks','custom-fields','comments','revisions','thumbnail','author','page-attributes','post-formats'),
		'labels' => array (
			'name' => 'Garments',
			'singular_name' => 'Garment',
			'menu_name' => 'Garments',
			'add_new' => 'Add Garment',
			'add_new_item' => 'Add New Garment',
			'edit' => 'Edit',
			'edit_item' => 'Edit Garment',
			'new_item' => 'New Garment',
			'view' => 'View Garment',
			'view_item' => 'View Garment',
			'search_items' => 'Search Garments',
			'not_found' => 'No Garments Found',
			'not_found_in_trash' => 'No Garments Found in Trash',
			'parent' => 'Parent Garment',
		)
	));
}

add_action('init', 'cptui_register_my_cpt_reviews');
function cptui_register_my_cpt_reviews() {
	register_post_type('reviews', array(
		'label' => 'Reviews',
		'description' => 'Place your totally tubalur user reviews here! Cowabunga dude!',
		'public' => true,
		'show_ui' => true,
		'show_in_menu' => true,
		'capability_type' => 'post',
		'map_meta_cap' => true,
		'hierarchical' => false,
		'menu_icon' => 'dashicons-format-chat',
		'query_var' => true,
		'supports' => array('title','editor','excerpt','trackbacks','custom-fields','comments','revisions','thumbnail','author','page-attributes','post-formats'),
		'labels' => array (
			'name' => 'Reviews',
			'singular_name' => 'Review',
			'menu_name' => 'Reviews',
			'add_new' => 'Add Review',
			'add_new_item' => 'Add New Review',
			'edit' => 'Edit',
			'edit_item' => 'Edit Review',
			'new_item' => 'New Review',
			'view' => 'View Review',
			'view_item' => 'View Review',
			'search_items' => 'Search Reviews',
			'not_found' => 'No Reviews Found',
			'not_found_in_trash' => 'No Reviews Found in Trash',
			'parent' => 'Parent Review',
		)
	));
}
/*
 * Custom Post Types and Taxonomies
 */

// Register Group name Custom Post Type
function group_names_post_type() {

	$labels = array(
		'name'                  => _x( 'Group Names', 'Post Type General Name', 'ministrygear' ),
		'singular_name'         => _x( 'Group name', 'Post Type Singular Name', 'ministrygear' ),
		'menu_name'             => __( 'Group name', 'ministrygear' ),
		'name_admin_bar'        => __( 'Group name', 'ministrygear' ),
		'archives'              => __( 'Item Archives', 'ministrygear' ),
		'parent_item_colon'     => __( 'Parent Item:', 'ministrygear' ),
		'all_items'             => __( 'Group Names', 'ministrygear' ),
		'add_new_item'          => __( 'Add New Group Name', 'ministrygear' ),
		'add_new'               => __( 'Add New', 'ministrygear' ),
		'new_item'              => __( 'New Group Name', 'ministrygear' ),
		'edit_item'             => __( 'Edit Group Name', 'ministrygear' ),
		'update_item'           => __( 'Update Group Name', 'ministrygear' ),
		'view_item'             => __( 'View Group Name', 'ministrygear' ),
		'search_items'          => __( 'Search Group Name', 'ministrygear' ),
		'not_found'             => __( 'Not found', 'ministrygear' ),
		'not_found_in_trash'    => __( 'Not found in Trash', 'ministrygear' ),
		'featured_image'        => __( 'Featured Image', 'ministrygear' ),
		'set_featured_image'    => __( 'Set featured image', 'ministrygear' ),
		'remove_featured_image' => __( 'Remove featured image', 'ministrygear' ),
		'use_featured_image'    => __( 'Use as featured image', 'ministrygear' ),
		'insert_into_item'      => __( 'Insert into item', 'ministrygear' ),
		'uploaded_to_this_item' => __( 'Uploaded to this item', 'ministrygear' ),
		'items_list'            => __( 'Items list', 'ministrygear' ),
		'items_list_navigation' => __( 'Items list navigation', 'ministrygear' ),
		'filter_items_list'     => __( 'Filter items list', 'ministrygear' ),
	);
	$args = array(
		'label'                 => __( 'Group name', 'ministrygear' ),
		'description'           => __( 'Group name Post Type', 'ministrygear' ),
		'labels'                => $labels,
		'supports'              => array( 'title' ),
		'hierarchical'          => false,
		'public'                => true,
		'show_ui'               => true,
		'show_in_menu'          => true,
		'menu_position'         => 55,
		'menu_icon'             => 'dashicons-groups',
		'show_in_admin_bar'     => true,
		'show_in_nav_menus'     => true,
		'can_export'            => true,
		'has_archive'           => true,
		'exclude_from_search'   => false,
		'publicly_queryable'    => true,
		'capability_type'       => 'page',
	);
	register_post_type( 'group_name', $args );

}
add_action( 'init', 'group_names_post_type', 0 );
// The Designs Post Type

add_action('init', 'cptui_register_my_cpt_design');
function cptui_register_my_cpt_design() {
	register_post_type('design', array(
		'label' => 'Designs',
		'description' => '',
		'public' => true,
		'show_ui' => true,
		'show_in_menu' => true,
		'capability_type' => 'post',
		'map_meta_cap' => true,
		'hierarchical' => false,
		'exclude_from_search'   => false,
		'menu_icon' => 'dashicons-businessman',
		'rewrite' => array('slug' => 'design', 'with_front' => true),
		'query_var' => true,
		'supports' => array('title','editor','excerpt','trackbacks','custom-fields','comments','revisions','thumbnail','author','page-attributes','post-formats'),
		'labels' => array (
			'name' => 'Designs',
			'singular_name' => 'Design',
			'menu_name' => 'Designs',
			'add_new' => 'Add Design',
			'add_new_item' => 'Add New Design',
			'edit' => 'Edit',
			'edit_item' => 'Edit Design',
			'new_item' => 'New Design',
			'view' => 'View Design',
			'view_item' => 'View Design',
			'search_items' => 'Search Designs',
			'not_found' => 'No Designs Found',
			'not_found_in_trash' => 'No Designs Found in Trash',
			'parent' => 'Parent Design',
		)
	));
}

// Register group_name_taxonomy
function group_name_taxonomy() {

	$labels = array(
		'name'                       => _x( 'Group categories', 'Taxonomy General Name', 'text_domain' ),
		'singular_name'              => _x( 'Group category', 'Taxonomy Singular Name', 'text_domain' ),
		'menu_name'                  => __( 'Group category', 'text_domain' ),
		'all_items'                  => __( 'All Group categories', 'text_domain' ),
		'parent_item'                => __( 'Parent Group category', 'text_domain' ),
		'parent_item_colon'          => __( 'Parent Group category:', 'text_domain' ),
		'new_item_name'              => __( 'New Group category', 'text_domain' ),
		'add_new_item'               => __( 'Add Group category', 'text_domain' ),
		'edit_item'                  => __( 'Edit Group category', 'text_domain' ),
		'update_item'                => __( 'Update Group category', 'text_domain' ),
		'view_item'                  => __( 'View Group category', 'text_domain' ),
		'separate_items_with_commas' => __( 'Separate Group categories with commas', 'text_domain' ),
		'add_or_remove_items'        => __( 'Add or remove Group categories', 'text_domain' ),
		'choose_from_most_used'      => __( 'Choose from the most used', 'text_domain' ),
		'popular_items'              => __( 'Popular Group categories', 'text_domain' ),
		'search_items'               => __( 'Search Group categories', 'text_domain' ),
		'not_found'                  => __( 'Not Found', 'text_domain' ),
		'no_terms'                   => __( 'No Group categories', 'text_domain' ),
		'items_list'                 => __( 'Items list', 'text_domain' ),
		'items_list_navigation'      => __( 'Group categories list navigation', 'text_domain' ),
	);
	$args = array(
		'labels'                     => $labels,
		'hierarchical'               => true,
		'public'                     => true,
		'show_ui'                    => true,
		'show_admin_column'          => true,
		'show_in_nav_menus'          => true,
		'show_tagcloud'              => true,
	);
	register_taxonomy( 'group_category', array( 'group_name' ), $args );

}
add_action( 'init', 'group_name_taxonomy', 0 );

add_action('init', 'cptui_register_my_taxes_garment_category');

function cptui_register_my_taxes_garment_category() {
	register_taxonomy( 'garment-category',array (
		0 => 'garment',
	),
		array( 'hierarchical' => true,
			'label' => 'Garment Catagories',
			'show_ui' => true,
			'query_var' => true,
			'show_admin_column' => false,
			'labels' => array (
				'search_items' => 'Garment Category',
				'popular_items' => '',
				'all_items' => 'All Categories',
				'parent_item' => '',
				'parent_item_colon' => '',
				'edit_item' => '',
				'update_item' => '',
				'add_new_item' => '',
				'new_item_name' => '',
				'separate_items_with_commas' => '',
				'add_or_remove_items' => '',
				'choose_from_most_used' => '',
			)
		) );
}

add_action('init', 'cptui_register_my_taxes_design_category');
function cptui_register_my_taxes_design_category() {
	register_taxonomy( 'design-category',array (
		0 => 'design',
	),
		array( 'hierarchical' => true,
			'label' => 'Design Categories',
			'show_ui' => true,
			'query_var' => true,
			'show_admin_column' => false,
			'labels' => array (
				'search_items' => 'Design Category',
				'popular_items' => '',
				'all_items' => '',
				'parent_item' => '',
				'parent_item_colon' => '',
				'edit_item' => '',
				'update_item' => '',
				'add_new_item' => '',
				'new_item_name' => '',
				'separate_items_with_commas' => '',
				'add_or_remove_items' => '',
				'choose_from_most_used' => '',
			)
		) );
}
add_action('init', 'cptui_register_my_taxes_design_categories');
function cptui_register_my_taxes_design_categories() {
	register_taxonomy( 'specific-design-categories',array (
		0 => 'design',
	),
		array( 'hierarchical' => true,
			'label' => 'Secondary Design Categories',
			'show_ui' => true,
			'query_var' => true,
			'show_admin_column' => false,
			'rewrite' => array(
				'slug' => 'design-ideas',
				'with_front' => true
			),
			'labels' => array (
				'search_items' => 'Secondary Design Categories',
				'popular_items' => '',
				'all_items' => '',
				'parent_item' => '',
				'parent_item_colon' => '',
				'edit_item' => 'Edit',
				'update_item' => 'Update',
				'add_new_item' => 'Add New',
				'new_item_name' => '',
				'separate_items_with_commas' => '',
				'add_or_remove_items' => '',
				'choose_from_most_used' => '',
			)
		) );
}
add_action('init', 'cptui_register_my_cpt_faq');
function cptui_register_my_cpt_faq() {
	register_post_type('faq', array(
		'label' => 'FAQ',
		'description' => 'Frequently Asked Questions',
		'public' => true,
		'show_ui' => true,
		'show_in_menu' => true,
		'capability_type' => 'post',
		'has_archive' => true,
		'map_meta_cap' => true,
		'hierarchical' => false,
		'menu_icon' => 'dashicons-welcome-learn-more',
		'rewrite' => array('slug' => 'faq', 'with_front' => true),
		'query_var' => true,
		'supports' => array('title','editor','excerpt','trackbacks','custom-fields','comments','revisions','thumbnail','author','page-attributes','post-formats'),
		'labels' => array (
			'name' => 'FAQ',
			'singular_name' => 'FAQ',
			'menu_name' => 'FAQ',
			'add_new' => 'Add FAQ',
			'add_new_item' => 'Add FAQ',
			'edit' => 'Edit',
			'edit_item' => 'Edit FAQ',
			'new_item' => 'New FAQ',
			'view' => 'View FAQ',
			'view_item' => 'View FAQ',
			'search_items' => 'Search FAQ',
			'not_found' => 'No FAQ Found',
			'not_found_in_trash' => 'No FAQ Found in Trash',
			'parent' => 'Parent FAQ',
		)
	) );
}

add_action('init', 'cptui_register_my_cpt_contest');
function cptui_register_my_cpt_contest() {
	register_post_type('contest', array(
		'label' => 'Contests',
		'description' => '',
		'public' => true,
		'show_ui' => true,
		'show_in_menu' => true,
		'capability_type' => 'post',
		'map_meta_cap' => true,
		'has_archive' => true,
		'menu_icon' => 'dashicons-awards',
		'hierarchical' => false,
		'rewrite' => array('slug' => 'contest', 'with_front' => true),
		'query_var' => true,
		'supports' => array('title','editor','excerpt','trackbacks','custom-fields','comments','revisions','thumbnail','author','page-attributes','post-formats'),
		'labels' => array (
			'name' => 'Contest Entries',
			'singular_name' => 'Contest Entry',
			'menu_name' => 'Contests',
			'add_new' => 'Add Contest Entry',
			'add_new_item' => 'Add New Contest Entry',
			'edit' => 'Edit',
			'edit_item' => 'Edit Contest Entry',
			'new_item' => 'New Contest Entry',
			'view' => 'View Contest Entry',
			'view_item' => 'View Contest Entry',
			'search_items' => 'Search Contest Entries',
			'not_found' => 'No Contest Entries Found',
			'not_found_in_trash' => 'No Contest Entries Found in Trash',
			'parent' => 'Parent Contest Entry',
		)
	));
}
add_action('init', 'cptui_register_my_taxes_contest_category');

function cptui_register_my_taxes_contest_category() {
	register_taxonomy( 'contest-category',array (
		0 => 'contest',
	),
		array( 'hierarchical' => true,
			'label' => 'Contest Iterations',
			'show_ui' => true,
			'query_var' => true,
			'show_admin_column' => false,
			'labels' => array (
				'search_items' => 'Contest Iterations',
				'popular_items' => '',
				'all_items' => 'All Contest Iterations',
				'parent_item' => '',
				'parent_item_colon' => '',
				'edit_item' => '',
				'update_item' => '',
				'add_new_item' => '',
				'new_item_name' => '',
				'separate_items_with_commas' => '',
				'add_or_remove_items' => '',
				'choose_from_most_used' => '',
			)
		) );
}
// Remove Yoast Columns - They're Annoying
add_filter( 'wpseo_use_page_analysis', '__return_false' );

// ADD NEW COLUMN
function createProductNumberColumn($defaults) {
	$defaults['productNumber'] = 'Product Number';
	return $defaults;
}

// SHOW THE FEATURED IMAGE
function populateProductNumberColumn($column_name, $post_ID) {
	if ($column_name == 'productNumber') {
		$answer = get_post_meta($post_ID,'ncDesignNumber');
		if ($answer) {
			echo $answer[0];
		}
	}
}

// Make the column Sortable
function makeSortable( $columns ) {
	$columns['productNumber'] = 'Product Number';
	return $columns;
}
function extend_search( $search, &$wp_query ) {
	global $wpdb;

	if ( empty( $search ))
		return $search;

	$terms = $wp_query->query_vars[ 's' ];
	$exploded = explode( ' ', $terms );
	if( $exploded === FALSE || count( $exploded ) == 0 )
		$exploded = array( 0 => $terms );

	$search = '';
	foreach( $exploded as $tag ) {
		$search .= " AND (
            (".$wpdb->posts.post_title." LIKE '%$tag%')
            OR (".$wpdb->posts.post_excerpt." LIKE '%$tag%')
            OR EXISTS
            (
                SELECT * FROM ".$wpdb->postmeta."
                WHERE post_ID = pl_posts.ID
                    AND meta_key = 'ncProductNumber'
                    AND meta_value LIKE '%$tag%'
            )
        )";
	}
	/*if( get_current_user_id() == 16 ){
		i_print( $search );
	}*/
	return $search;
}
add_action('designs_search', 'extend_search',1,2);

add_filter( 'manage_edit-design_sortable_columns', 'makeSortable' );
add_filter('manage_design_posts_columns', 'createProductNumberColumn');
add_action('manage_design_posts_custom_column', 'populateProductNumberColumn', 10, 2);

function url_get_contents ($Url) {
	if (!function_exists('curl_init')){
		die('CURL is not installed!');
	}
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $Url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	$output = curl_exec($ch);
	curl_close($ch);
	return $output;
}

add_filter('posts_join', 'search_join' );
function search_join ($join){
	global $pagenow, $wpdb;
	// I want the filter only when performing a search on edit page of Custom Post Type named "segnalazioni"
	if ( is_admin() && $pagenow=='edit.php' && $_GET['post_type']=='design' && $_GET['s'] != '' && false) { //GX excl
		$join .='LEFT JOIN '.$wpdb->postmeta. ' ON '. $wpdb->posts . '.ID = ' . $wpdb->postmeta . '.post_id ';
	}
	return $join;
	//if( get_current_user_id() == 16 ){ echo '<pre>';print_r( $wpdb ); exit; }
}

//add_filter( 'posts_where', 'search_where' ); //GX excl
function search_where( $where ){
	global $pagenow, $wpdb;
	// I want the filter only when performing a search on edit page of Custom Post Type named "segnalazioni"
	if ( is_admin() && $pagenow=='edit.php' && $_GET['post_type']=='design' && $_GET['s'] != '') {
		$where = preg_replace(
			"/\(\s*".$wpdb->posts.".post_title\s+LIKE\s*(\'[^\']+\')\s*\)/",
			"(".$wpdb->posts.".post_title LIKE $1) OR (".$wpdb->postmeta.".meta_value LIKE $1)", $where );
	}
	return $where;
}

function addThemeStyles() {

	// Collect the options and set defaults
	$options = get_option('impact-options');
	if(!isset($options['headerBar'])) 			$options['headerBar'] 			= '#484F51';
	if(!isset($options['footerBar'])) 			$options['footerBar'] 			= '#484F51';
	if(!isset($options['menuBar'])) 			$options['menuBar'] 			= '#333333';
	if(!isset($options['searchBar'])) 			$options['searchBar'] 			= '#333333';
	if(!isset($options['mainNavTextDefault'])) 	$options['mainNavTextDefault'] 	= '#FFFFFF';
	if(!isset($options['mainNavTextHover'])) 	$options['mainNavTextHover'] 	= '#BFBFBF';
	if(!isset($options['mainNavTextActive'])) 	$options['mainNavTextActive'] 	= '#BFBFBF';
	if(!isset($options['mainNavHover'])) 		$options['mainNavHover'] 		= '#222222';
	if(!isset($options['mainNavActive'])) 		$options['mainNavActive'] 		= '#222222';
	if(!isset($options['designListingBar']))	$options['designListingBar'] 	= '#BCBDC0';

	// Output the script
	echo '
	<style type="text/css">
		#header-wrapper, .skip-container {background-color:'.$options['headerBar'].'!important}
		.menu, #nav-wrapper, .designIdeaContainer {background-color:'.$options['menuBar'].'!important}
		#footer-masthead-wrapper {background-color:'.$options['searchBar'].'!important}
		#footer {background-color:'.$options['footerBar'].'!important}
		.menu a { color:'.$options['mainNavTextDefault'].'!important}
		.menu a:hover { color:'.$options['mainNavTextHover'].'!important}
                    #footer input[type="submit"] {border:'.$options['menuBar'].'!important;background:'.$options['menuBar'].'!important;color:'.$options['mainNavTextActive'].'!important}
		.menu li.current-menu-item a {color:'.$options['mainNavTextActive'].'!important}
		.menu li:hover>a {background-color:'.$options['mainNavHover'].'!important}
		#menu-main-nav.menu li li>a,#menu-main.menu li  {background-color:'.$options['menuBar'].'!important}
		#menu-main-nav.menu li:hover>a,#menu-main-nav.menu li li:hover>a,#menu-main.menu li:hover>a  {background-color:'.$options['mainNavHover'].'!important; color:'.$options['mainNavTextDefault'].'!important}
		.menu li.current-menu-item a {background-color:'.$options['mainNavActive'].'!important}
		.item-view, .item-view-gc {background-color:'.$options['designListingBar'].'!important}
		.item-view p, .item-view-gc p {color:'.$options['designListingFont'].'!important}
		.item-number, .item-number-gc {background-color:'.$options['designNumberColor'].'!important}
		.hoverLabel {background-color:'.$options['designNumberColor'].'!important}
		.item-number p, .item-number-gc p {color:'.$options['designNumberFontColor'].'!important}
		ul.page-numbers li a.next {color:'.$options['pagiColor'].'!important}
		ul.page-numbers li span.current {background-color:'.$options['pagiColor'].'!important}
		.fa-chevron-left:before {color:'.$options['backArrowColor'].'!important}
		.cat-list li {
			background:'.$options['catDefaultBG'].'!important; 
			border:1px solid '.$options['catDefaultBorder'].'!important;
		}
		.cat-list li a {color:'.$options['catDefaultColor'].'!important;}
		.cat-list li:hover {
			background:'.$options['catHoverBG'].'!important; 
			border:1px solid '.$options['catHoverBorder'].'!important;
		}
		.cat-list li:hover a {color:'.$options['catHoverColor'].'!important;}
		.cat-list li.current-cat {
			background:'.$options['catActiveBG'].'!important; 
			border:1px solid '.$options['catActiveBorder'].'!important;
		}
		.cat-list li.current-cat a {color:'.$options['catActiveColor'].'!important;}
		.garmentLiveText {background-color:'.$options['liveTextBG'].'!important}
		.garmentLiveText h3 {color:'.$options['liveTextTitle'].'!important}
		.garmentLiveText p {color:'.$options['liveTextColor'].'!important}
		.cat-list li.current-cat.i-have-kids, .cat-list li.i-have-kids {
			background: '.$options['catParentBG'].'!important;
			border: '.$options['catParentBorder'].'!important;
		}
		.cat-list li.current-cat.i-have-kids > a , .cat-list li.i-have-kids > a {
			color:'.$options['catParentColor'].'!important;
		}
		.churchShirts h2 { color:'.$options['mainTitle'].'!important; }
		.churchShirts p { color:'.$options['mainDescription'].'!important; }
		#header .head-phone, #header .head-phone a { color:'.$options['mainPhone'].'!important; }
		header .phoneDescription { color:'.$options['mainPhoneDesc'].'!important; }
		.customerReviews h3 { color:'.$options['cr_title'].'!important; }
		.customerReviews .customerReviewsHeader p {  color:'.$options['cr_subtitle'].'!important; }
		.customerReviews .singleReview {  
			color:'.$options['cr_textcolor'].'!important; 
			background-color:'.$options['cr_bgcolor'].'!important;
		}
		.customerReviews .reviewRating { background-image: url("'.$options['cr_stars']['src'].'")!important; }
		#container a.button, #container input[type=\'reset\'], #container input[type=\'button\'], #container input[type=\'submit\'] {
			background: '.$options['buttonDefaultBG'].'!important;
			color: '.$options['buttonDefaultText'].'!important;
			border: 1px solid '.$options['buttonDefaultBorder'].'!important;
		}
		#container a.button:hover, #container input[type=\'reset\']:hover, #container input[type=\'button\']:hover, #container input[type=\'submit\']:hover {
			background: '.$options['buttonHoverBG'].'!important;
			color: '.$options['buttonHoverText'].'!important;
			border: 1px solid '.$options['buttonHoverBorder'].'!important;
		}
                #container #footer input[type="submit"],#container #footer input[type="submit"]:hover {background:'.$options['menuBar'].'!important;}
		body .da_request_proof { background: '.$options['headerBar'].' !important; }
		body .da_label { color: '.$options['h1'].' !important; }
		body h1 { color: '.$options['h1'].'; }
		body h2 { color: '.$options['h2'].' !important; }
		body h3 { color: '.$options['h3'].' !important; }
		body h4 { color: '.$options['h4'].' !important; }
		body h5 { color: '.$options['h5'].' !important; }
		body h6 { color: '.$options['h6'].' !important; }
		body p { color: '.$options['p'].' !important; }
		.headerImageTextArea h2 { color: '.$options['landingHeaderTitle'].'; }
		.headerImageTextArea p { color: '.$options['landingHeaderP'].'; }
		.splitDesignForm .headerTitle {
			background-color: '.$options['leftHeaderBG'].'!important;
		}
		.splitDesignForm .splitDesignFormRight .headerTitle {
			background-color: '.$options['rightHeaderBG'].'!important;	
		}
		.designIdeaTopText, .designIdeaButton {
			color: '.$options['designIdeasTextColor'].'!important;	
		}
		.designIdeaTextContainer {
			border-color: '.$options['designIdeasTextColor'].'!important;
		}
		@media screen and (max-width: 650px) {
			.js .main-nav {background-color:'.$options['menuBar'].'!important;background-image:none!important;}	
		}
	</style>';

	// Output the favicon link
	if(isset($options['favicon'])):
		echo '<link rel="icon" type="image/png" href="'.$options['favicon']['src'].'">';
	endif;

}
add_action('wp_head','addThemeStyles',1);

// Function to display the customer reviews
function customerReviews() {

	// Setup the container and header for the reviews
	echo '<a href="/customer-reviews/">';
	echo '<div class="customerReviews">';
	echo '<div class="customerReviewsHeader">';
	echo '<h3>Uncensored Customer Reviews</h3>';
	echo '<p>Read what real customers have to say getting their church t-shirts</p>';
	echo '</div>';
	echo '<div class="customerReviewsContent">';

	// Setup the loop to display the reviews
	$args = array(
		'post_type' 		=> 'reviews',
		'posts_per_page' 	=> 5
	);
	// switch_to_blog(1);
	$q = new WP_Query($args);
	if($q->have_posts()):
		while($q->have_posts()):
			$q->the_post();

			$rating = get_post_meta(get_the_ID(), 'reviewRating',true);
			$name = get_post_meta(get_the_ID(), 'reviewName',true);
			$groupName = get_post_meta(get_the_ID(), 'groupName',true);
			$width = (110 / 5) * $rating;
			$date = date('m/d/Y',strtotime(get_the_date()));
			echo '<div class="singleReview">';
			if($name || $groupName):
				echo '<div class="reviewRating" style="width:'.$width.'px"></div>';
				echo '<div class="clearfix"></div>';
				echo '<div class="reviewDate">'.$date.'</div>';
				echo '<div class="reviewName">';
				if($name && $groupName):
					echo $name.', '.$groupName;
				elseif($name):
					echo $name;
				elseif($groupName):
					echo $groupName;
				endif;
				echo '</div>';
				echo '<div class="clearfix"></div>';
			else:
				echo '<div class="reviewRating" style="width:'.$width.'px"></div>';
				echo '<div class="clearfix"></div>';
			endif;
			the_content();
			echo '</div>';
		endwhile;
	endif;
	// restore_current_blog();

	// Reset and close up shop
	echo '</div>';
	echo '<div class="reviewLink">';
	echo '<a href="/customer-reviews/">Leave your own review!</a>';
	echo '</div>';
	echo '</div>';
	echo '</a>';

}

class Walker_Category_Find_Parents extends Walker_Category {
	function start_el( &$output, $category, $depth = 0, $args = array(), $id = 0 ) {
		extract($args);

		$cat_name = esc_attr( $category->name );
		$cat_name = apply_filters( 'list_cats', $cat_name, $category );
		$link = '<a href="' . esc_url( get_term_link($category) ) . '" ';
		if ( $use_desc_for_title == 0 || empty($category->description) )
			$link .= 'title="' . esc_attr( sprintf(__( 'View all posts filed under %s' ), $cat_name) ) . '"';
		else
			$link .= 'title="' . esc_attr( strip_tags( apply_filters( 'category_description', $category->description, $category ) ) ) . '"';
		$link .= '>';
		$link .= $cat_name . '</a>';

		if ( !empty($show_count) )
			$link .= ' (' . intval($category->count) . ')';

		if ( 'list' == $args['style'] ) {
			$output .= "\t<li";
			$class = 'cat-item cat-item-' . $category->term_id;

			$termchildren = get_term_children( $category->term_id, $category->taxonomy );
			if(count($termchildren)>0){
				$class .=  ' i-have-kids';
			}

			if ( !empty($current_category) ) {
				$_current_category = get_term( $current_category, $category->taxonomy );
				if ( $category->term_id == $current_category )
					$class .=  ' current-cat';
				elseif ( $category->term_id == $_current_category->parent )
					$class .=  ' current-cat-parent';
			}
			$output .=  ' class="' . $class . '"';
			$output .= ">$link\n";
		} else {
			$output .= "\t$link<br />\n";
		}
	}
}

add_filter('gform_field_value_landing_page', 'my_custom_population_function');
function my_custom_population_function($value){
	return get_the_title();
}

function nc_the_excerpt( $postID=0, $more=0, $length=55, $hellip=0 ) {
	if ( $postID && is_int($postID) ) {
		$the_post = get_post($postID);
	} else {
		if ( $postID != 0 || is_string($postID) ) {
			if ( $length == 0 || $length == 1 ) {
				$hellip = $length;
			} else {
				$hellip = false;
			}

			if ( is_int($more) ) {
				$length = $more;
			} else {
				$length = 55;
			}

			$more = $postID;
		}
		$postID = get_the_ID();
		$the_post = get_post($postID);
	}

	if ( $the_post->post_excerpt ) {
		$string = strip_tags(strip_shortcodes($the_post->post_excerpt), '');
	} else {
		$string = strip_tags(strip_shortcodes($the_post->post_content), '');
	}

	$string = string_limit_words($string, $length);

	if ( $hellip ) {
		if ( $string[1] == 1 ) {
			$string[0] .= '&hellip; ';
		}
	}

	if ( isset($more) && $more != '' ) {
		$string[0] .= ' <a class="nc_the_excerpt" href="' . get_permalink($postID) . '">' . $more . '</a>';
	}

	return $string[0];
}

//Text limiter by words
function string_limit_words($string, $word_limit){
	$limited[0] = $string;
	$limited[1] = 0;
	$words = explode(' ', $string, ($word_limit + 1));
	if(count($words) > $word_limit){
		array_pop($words);
		$limited[0] = implode(' ', $words);
		$limited[1] = 1;
	}
	return $limited;
}

function modify_the_search_filter($query) {
	if ($query->is_search) {
		if( $_GET['post_type'] == 'group_name' ){
			$query->set('post_type', 'group_name');
		} else {
			$query->set('post_type', 'design');
		}

	};
	return $query;
};

add_filter('pre_get_posts','modify_the_search_filter');

//Gre / GX search method

$blog_id = get_current_blog_id();
if( $blog_id != 1){
	//add_filter( 'pre_get_posts', 'gx_custom_search_query');
	function modify_wp_search_where( $where ) {
		if( is_search() ) {
			global $wpdb, $wp;

			$where = preg_replace(
				"/($wpdb->posts.post_title (LIKE '%{$wp->query_vars['s']}%'))/i",
				"$0 OR ( $wpdb->postmeta.meta_key = 'ncDesignNumber' AND $wpdb->postmeta.meta_value LIKE '%{$wp->query_vars['s']}%' )",
				$where
			);

			add_filter( 'posts_join_request', 'modify_wp_search_join' );
			add_filter( 'posts_distinct_request', 'modify_search_distinct' );
		}
		return $where;
	}
	add_action( 'posts_where_request', 'modify_wp_search_where' );

	function modify_wp_search_join( $join ) {
		global $wpdb;
		return $join .= " LEFT JOIN $wpdb->postmeta ON ($wpdb->posts.ID = $wpdb->postmeta.post_id) ";
	}
	function modify_search_distinct( $distinct ) {
		$distinct = 'DISTINCT';
		return $distinct;
	}
}

/********************************************************************
 *																	*
 *		THE AJAX FOR THE DESIGN BUILDER APPLICATION					*
 *																	*
 ********************************************************************/
add_action( 'wp_ajax_da_builder', 'da_designer_byGreg' );
add_action( 'wp_ajax_nopriv_da_builder', 'da_designer_byGreg' );
function da_designer_byGreg() {
	//echo date( 'h:i:s', time() ).' - Start <br>'; //debug 1
	if ( !(isset($_REQUEST['action']) && 'da_builder' == $_POST['action']) )
		return;

	switch_to_blog(1);
	// Access the database
	global $wpdb;

	// Getting post ID from $_POST request
	$post_id = $_POST['post_id'];

	// Run the Query
	$post = get_post( $post_id );
	$response = array();

	// Check for a response from the database and loop through the response
	if( count( $post ) ){
		//while($q->have_posts()){

		// Fetch the post fields
		$post_fields = get_fields( $post_id );
		//i_print( $post_fields ); exit;
		// Let's output the garment colors for this garment
		$default_color = false;
		foreach($post_fields['available_colors'] as $color){

			// If this is the default garment color
			if($_POST['garment_color'] == $color['color_name']){
				// Add this color to the color array
				$garment_colors[] = array(
					'text' 			=> $color['color_name'] ,
					'value' 		=> $color['color_name'] ,
					'selected' 		=> true ,
					'description' 	=> false ,
					'color_code'	=> $color['color_code'],
					// 'imageSrc'		=> $color['color_image'] ,
					'shirt_front'	=> $color['shirt_front'] ,
					'shirt_back'	=> $color['shirt_back']
				);

				// Add the shirt images
				$garment_color_image 		= $color['shirt_front'];
				$garment_color_image_back 	= $color['shirt_back'];

				// Add the color to it's own variable for easy access
				$selected_color = array(
					'text' 			=> $color['color_name'] ,
					'value' 		=> $color['color_name'] ,
					'selected' 		=> true ,
					'description' 	=> false ,
					'color_code'	=> $color['color_code'],
					// 'imageSrc'		=> $color['color_image'] ,
					'shirt_front'	=> $color['shirt_front'] ,
					'shirt_back'	=> $color['shirt_back']
				);

				// Note that we found the default color
				$default_color = true;

				// If this isn't the default color....

			} else {

				// Add this color to the color array
				$garment_colors[] = array(
					'text' 			=> $color['color_name'] ,
					'value' 		=> $color['color_name'] ,
					'selected' 		=> false ,
					'description' 	=> false ,
					'color_code'	=> $color['color_code'],
					// 'imageSrc'		=> $color['color_image'] ,
					'shirt_front'	=> $color['shirt_front'] ,
					'shirt_back'	=> $color['shirt_back']
				);
			}
		}

		// If we didn't find a match for the currently selected color
		if($default_color == false) {
			$garment_colors[0]['selected'] 	= true;
			$garment_color_image 			= $garment_colors[0]['shirt_front'];
			$garment_color_image_back		= $garment_colors[0]['shirt_back'];
			$selected_color 				= $garment_colors[0];
		}

		// Fetch the pricing Table
		$pricing_index = $_POST['color_qty'] - 1;
		$pricing_table = $post_fields['pricing_table'][$pricing_index];

		// Fetch the description
		$description 	= $post->post_content; //get_the_content();
		$title			= $post->post_title; //get_the_title();
		//}
	}

	// Compile our data into an array
	$array['colors'] = $garment_colors;
	$array['selected_color'] = $selected_color;
	$array['prices'] = $pricing_table;
	$array['title'] = $title;
	$array['description'] = $description;
	$array['garment_color_image'] = $garment_color_image;
	$array['garment_color_image_back'] = $garment_color_image_back;

	// Encode the data into a javascript freindly response
	$response = json_encode( $array );

	//restore_current_blog();

	// Return the post ID
	echo $response;

	// Terminate immediately and return the response
	exit;
}

function da_designer() {

	switch_to_blog(1);

	// Access the database
	global $wpdb;

	// The Query Arguments
	$args = array(
		'post_type' => 'garment',
		'post__in' => array( $_POST['post_id'] )
	);


	// Run the Query
	$q = new WP_Query($args);
	$response = array();

	// Check for a response from the database and loop through the response
	if($q->have_posts()):
		while($q->have_posts()): $q->the_post();

			// Fetch the post fields
			$post_fields = get_fields();

			// Let's output the garment colors for this garment
			$default_color = false;
			foreach($post_fields['available_colors'] as $color):

				// If this is the default garment color
				if($_POST['garment_color'] == $color['color_name']):

					// Add this color to the color array
					$garment_colors[] = array(
						'text' 			=> $color['color_name'] ,
						'value' 		=> $color['color_name'] ,
						'selected' 		=> true ,
						'description' 	=> false ,
						'color_code'	=> $color['color_code'],
						// 'imageSrc'		=> $color['color_image'] ,
						'shirt_front'	=> $color['shirt_front'] ,
						'shirt_back'	=> $color['shirt_back']
					);

					// Add the shirt images
					$garment_color_image 		= $color['shirt_front'];
					$garment_color_image_back 	= $color['shirt_back'];

					// Add the color to it's own variable for easy access
					$selected_color = array(
						'text' 			=> $color['color_name'] ,
						'value' 		=> $color['color_name'] ,
						'selected' 		=> true ,
						'description' 	=> false ,
						'color_code'	=> $color['color_code'],
						// 'imageSrc'		=> $color['color_image'] ,
						'shirt_front'	=> $color['shirt_front'] ,
						'shirt_back'	=> $color['shirt_back']
					);

					// Note that we found the default color
					$default_color = true;

				// If this isn't the default color....
				else:

					// Add this color to the color array
					$garment_colors[] = array(
						'text' 			=> $color['color_name'] ,
						'value' 		=> $color['color_name'] ,
						'selected' 		=> false ,
						'description' 	=> false ,
						'color_code'	=> $color['color_code'],
						// 'imageSrc'		=> $color['color_image'] ,
						'shirt_front'	=> $color['shirt_front'] ,
						'shirt_back'	=> $color['shirt_back']
					);
				endif;

			endforeach;

			// If we didn't find a match for the currently selected color
			if($default_color == false) {
				$garment_colors[0]['selected'] 	= true;
				$garment_color_image 			= $garment_colors[0]['shirt_front'];
				$garment_color_image_back		= $garment_colors[0]['shirt_back'];
				$selected_color 				= $garment_colors[0];
			}

			// Fetch the pricing Table
			$pricing_index = $_POST['color_qty'] - 1;
			$pricing_table = $post_fields['pricing_table'][$pricing_index];

			// Fetch the description
			$description 	= get_the_content();
			$title			= get_the_title();

		endwhile;
	endif;

	// Compile our data into an array
	$array['colors'] = $garment_colors;
	$array['selected_color'] = $selected_color;
	$array['prices'] = $pricing_table;
	$array['title'] = $title;
	$array['description'] = $description;
	$array['garment_color_image'] = $garment_color_image;
	$array['garment_color_image_back'] = $garment_color_image_back;

	// Encode the data into a javascript freindly response
	$response = json_encode($array);

	restore_current_blog();

	// Return the post ID
	echo $response;

	// Terminate immediately and return the response
	wp_die();
}

function impact_search_form( $form ) {

	//$form = '<form method="get" id="searchform" action="' . home_url( '/' ) . '"> <label class="screen-reader-text" for="s">' . __( 'Search for:' ) . '</label><input type="submit" class="submit" name="submit" id="searchsubmit" value="'. esc_attr__( 'Search' ) .'"><input type="text" class="field" name="s" id="s" value="" placeholder="Search Designs..."></form>';
	$form = '<form method="get" id="searchform" action="' . home_url( '/' ) . '"> <label class="screen-reader-text" for="s">' . __( 'Search for:' ) . '</label>';
	$form.= '<button type="submit" class="submit fa fa-search" name="submit" id="searchsubmit" value="'. esc_attr__( 'Search' ) .'"> </button>';
	$form.= '<input type="text" class="field" name="s" id="s" value="" placeholder="Search Designs..."></form>';

	return $form;
}

add_filter( 'get_search_form', 'impact_search_form' );


function display_search_terms() {

	switch_to_blog(1);
	$data = get_field('search_terms','options');
	if($data):
		echo '<h4>Popular Searches</h4>';
		echo '<ul class="search_page_terms">';
		foreach($data as $term):
			echo '<li><a href="http://ministrygear.com/?submit=Search&s='.urlencode($term['search_term']).'">'.ucwords($term['search_term']).'</a></li>';
		endforeach;
		echo '</ul>';
	endif;

	restore_current_blog();
}

//add_action('acf/register_fields', 'impact_register_fields');

//function impact_register_fields()
//{
// include_once('acf-multisite/acf-relationship-multisite.php');
include_once('acf-fields.php');
//}
add_action( 'init', 'my_deregister_heartbeat', 1 );
function my_deregister_heartbeat() {
	global $pagenow;

	if ( 'post.php' != $pagenow && 'post-new.php' != $pagenow )
		wp_deregister_script('heartbeat');
}
if( !function_exists( "i_print" ) ) {
	function i_print( $object ){
		echo '<pre>'; print_r( $object ); echo '</pre>';
	}
}






